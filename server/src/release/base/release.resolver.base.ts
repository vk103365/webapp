/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeleteReleaseArgs } from "./DeleteReleaseArgs";
import { ReleaseFindManyArgs } from "./ReleaseFindManyArgs";
import { ReleaseFindUniqueArgs } from "./ReleaseFindUniqueArgs";
import { Release } from "./Release";
import { ReleaseService } from "../release.service";

@graphql.Resolver(() => Release)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ReleaseResolverBase {
  constructor(
    protected readonly service: ReleaseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Release",
    action: "read",
    possession: "any",
  })
  async _releasesMeta(
    @graphql.Args() args: ReleaseFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Release])
  @nestAccessControl.UseRoles({
    resource: "Release",
    action: "read",
    possession: "any",
  })
  async releases(
    @graphql.Args() args: ReleaseFindManyArgs
  ): Promise<Release[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Release, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Release",
    action: "read",
    possession: "own",
  })
  async release(
    @graphql.Args() args: ReleaseFindUniqueArgs
  ): Promise<Release | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Release)
  @nestAccessControl.UseRoles({
    resource: "Release",
    action: "delete",
    possession: "any",
  })
  async deleteRelease(
    @graphql.Args() args: DeleteReleaseArgs
  ): Promise<Release | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
